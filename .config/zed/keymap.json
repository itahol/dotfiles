// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  {
    "context": "Editor && vim_mode == normal",
    "bindings": {
      "space w": "workspace::Save"
    }
  },
  {
    "context": "Editor && vim_mode == insert",
    "bindings": {
      "ctrl-i": "editor::ToggleInlayHints",
      "ctrl-k": "editor::ShowSignatureHelp",
      "ctrl-y": "editor::AcceptEditPrediction"
    }
  },
  {
    "context": "VimControl && !menu",
    "bindings": {
      // Put key bindings here if you want them to work in normal & visual mode.
      "space s g": ["task::Spawn", { "task_name": "Live Grep", "target": "center" }],
      "shift-l": ["vim::EndOfLine", { "display_lines": true }],
      "shift-h": ["vim::FirstNonWhitespace", { "display_lines": true }],
      "space h s": "git::ToggleStaged",
      "space h u": "git::ToggleStaged",
      "space h r": "git::Restore"
    }
  },
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work only in normal mode
      // UI
      "space e": "pane::RevealInProjectPanel",
      "space z": "workspace::CloseAllDocks",
      "ctrl-/": "workspace::ToggleBottomDock",
      "\\": "workspace::ToggleRightDock",
      "space f": "editor::Format",
      "space q": "diagnostics::Deploy",
      "space r n": "editor::Rename",
      "space v k": "zed::OpenKeymap",
      "space v s": "zed::OpenSettings",
      "space v t": "zed::OpenTasks",
      "space t b": "editor::ToggleGitBlameInline",
      "space t i": "editor::ToggleInlayHints",
      "space t t": "editor::ToggleTabBar",
      "space t z": "workspace::ToggleCenteredLayout",
      // Folds
      "tab": "editor::ToggleFold",
      // Tasks
      "alt-r": "task::Spawn",
      // Search
      "space s p": "projects::OpenRecent",
      "space s f": "file_finder::Toggle",
      "space s b": "tab_switcher::Toggle",
      "space s r": ["task::Spawn", { "task_name": "PR - Go to file" }],
      "space s s": "outline::Toggle",
      "space s w": "buffer_search::Deploy",
      "space s W": "pane::DeploySearch",
      "space space": "tab_switcher::Toggle",
      // Ctrl-hjkl to move between panes
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",
      // LSP
      "g shift-o": "outline::Toggle",
      // Change tabs tabs
      "shift-l": "pane::ActivateNextItem",
      "shift-h": "pane::ActivatePreviousItem",
      // Git
      "space shift-g": "git_panel::ToggleFocus",
      "space g b": "git::Branch",
      "space g a": "git::StageAll",
      "space g A": ["task::Spawn", { "task_name": "Git Amend Commit" }],
      "space g c": "git::Commit",
      "space g g": ["task::Spawn", { "task_name": "Start lazygit", "target": "center" }],
      "space g o": "editor::OpenPermalinkToLine",
      "space g p": "git::Pull",
      "space g P": "git::Push",
      "space g r": "git::RestoreFile",
      "space g s": "git::StageFile",
      "space g S": ["task::Spawn", { "task_name": "Git Stash" }],
      "space g u": "git::UnstageFile",
      "space g v": "git_panel::ToggleFocus",
      // Pull Requests
      "space r o": ["task::Spawn", { "task_name": "PR - Open" }],
      // Tasks
      // "!": "task::Spawn",
      // Tests
      "space t r": ["task::Spawn", { "task_name": "Run Test" }],
      "space t f": ["task::Spawn", { "task_name": "Test File" }],
      // Build
      "space b": ["task::Spawn", { "task_name": "Build" }],
      "space B": ["task::Spawn", { "task_name": "Build with dependencies" }]
    }
  },
  {
    "context": "Editor && multibuffer && vim_mode == normal && !VimWaiting && !menu",
    "use_key_equivalents": true,
    "bindings": {
      "[ e": "editor::MoveToStartOfExcerpt",
      "] e": "editor::MoveToStartOfNextExcerpt"
    }
  },
  {
    "context": "vim_mode == visual && !menu",
    "bindings": {
      // Put key bindings here if you want them to work in visual mode.
      "v": "editor::SelectLargerSyntaxNode",
      "V": "editor::SelectSmallerSyntaxNode",
      "shift-j": "editor::MoveLineDown",
      "shift-k": "editor::MoveLineUp"
    }
  },
  {
    "context": "Dock || OutlinePanel",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-/": "workspace::ToggleBottomDock"
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "a": "project_panel::NewFile",
      "A": "project_panel::NewDirectory",
      "x": "project_panel::Cut",
      "y": "project_panel::Copy",
      "p": "project_panel::Paste",
      "r": "project_panel::Rename",
      "d": ["project_panel::Trash", { "skip_prompt": true }],
      "cmd-delete": ["project_panel::Delete", { "skip_prompt": false }],
      "space": "project_panel::Open",
      "\\": "workspace::ToggleRightDock"
    }
  },
  {
    "context": "EmptyPane",
    "bindings": {
      "space s f": "file_finder::Toggle",
      "space s p": "projects::OpenRecent"
    }
  },
  {
    "context": "vim_operator == a || vim_operator == i || vim_operator == cs",
    "bindings": {
      "b": "vim::AnyBrackets"
    }
  }
]
